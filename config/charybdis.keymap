#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <input/processors.dtsi>
#include <dt-bindings/zmk/input_transform.h>
#include <behaviors/mouse_move.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

// Define (windows) CUA keycodes (remember that these are just dumb keycodes and won't work in emacs)
// from https://github.com/manna-harbour/miryoku_zmk/blob/master/miryoku/miryoku_clipboard.h

#define U_RDO &kp LC(Y)
#define U_PST &kp LC(V)
#define U_CPY &kp LC(C)
#define U_CUT &kp LC(X)
#define U_UND &kp LC(Z)

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&caps_word { continue-list = <UNDERSCORE BACKSPACE DELETE MINUS>; };

// zip scaler takes mult/divisor to create multiplier. 1.5x is too fast. 1 seems fine?

&trackball_listener {
    input-processors =
        <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT | INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_XY_SWAP)>,
        <&zip_xy_scaler 1 1>,
        <&zip_temp_layer 3 500>;

    sniper {
        layers = <4 7>;
        input-processors = <&zip_xy_scaler 1 8>;
        process-next;
    };

    scroller {
        layers = <5 7>;
        input-processors =
            <&zip_xy_transform (INPUT_TRANSFORM_X_INVERT | INPUT_TRANSFORM_XY_SWAP)>,
            <&zip_xy_to_scroll_mapper>;
    };
};

/ {
    combos { compatible = "zmk,combos"; };

    behaviors {
        mouse_tap: mouse_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSE_TAP";
            bindings = <&mkp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
        };

        caps_tap: caps_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_TAP";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <100>;
            flavor = "tap-preferred";
        };

        rhandtap: rhandtap {
            compatible = "zmk,behavior-hold-tap";
            label = "RHANDTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <199>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <13 25 14 26 37 38 39 15 27 16 40 28 17 29 41 50 51 48>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&mt GRAVE ESCAPE             &kp N1           &kp N2            &kp N3       &kp N4        &kp N5        &kp N6                   &kp N7              &kp N8                &kp N9                 &kp N0                   &lt 6 MINUS
&mt LA(TAB) TAB              &kp Q            &kp W             &kp E        &kp R         &kp T                           &kp Y  &kp U               &kp I                 &kp O                  &kp P                    &kp EQUAL
&caps_tap CAPSLOCK 0         &mt LEFT_GUI A   &mt LALT S        &mt LCTRL D  &mt LSHIFT F  &kp G                           &kp H  &rhandtap RSHIFT J  &rhandtap RCTRL K     &rhandtap RALT L       &rhandtap LEFT_GUI SEMI  &kp APOS
&mt LC(BACKSPACE) BACKSPACE  &lt 3 Z          &kp X             &kp C        &kp V         &kp B                           &kp N  &kp M               &mouse_tap MB4 COMMA  &mouse_tap MB5 PERIOD  &lt 3 SLASH              &mt LC(DELETE) DELETE
                             &mt TAB LA(TAB)  &kp LEFT_CONTROL  &kp LGUI     &lt 1 SPACE   &kp LEFT_ALT  &kp LEFT_CONTROL         &lt 2 ENTER                               &sk LEFT_SHIFT
            >;
        };

        NAV {
            bindings = <
&kp F12          &kp F1          &kp F2           &kp F3    &kp F4     &kp F5    &kp F6                &kp F7  &kp F8  &kp F9  &kp F10          &kp F11
&trans           &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp UP    &kp EQUAL  &kp LBRC              &kp RBRC  &kp N7  &kp N8  &kp N9  &kp KP_PLUS      &trans
&kp PRINTSCREEN  &kp INSERT      &kp LEFT         &kp DOWN  &kp RIGHT  &kp LBKT              &kp RBKT  &kp N4  &kp N5  &kp N6  &kp KP_MINUS     &kp KP_DIVIDE
&trans           &kp DEL         &kp PG_UP        &none     &kp PG_DN  &kp LPAR              &kp RPAR  &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &trans
                 &trans          &trans           &trans    &trans     &trans    &kp KP_DOT            &kp N0          &trans
            >;
        };

        SYM {
            bindings = <
&kp F12  &kp F1         &kp F2     &kp F3     &kp F4            &kp F5         &kp F6             &kp F7          &kp F8     &kp F9        &kp F10        &kp F11
&trans   &kp EXCL       &kp AT     &kp HASH   &kp DLLR          &kp PRCNT              &kp CARET  &kp AMPS        &kp STAR   &kp QUESTION  &kp SQT        &trans
&trans   &kp PLUS       &kp EQUAL  &kp LPAR   &kp RPAR          &kp DQT                &kp COLON  &kp LBKT        &kp RBKT   &kp LBRC      &kp RBRC       &trans
&trans   &kp LESS_THAN  &kp PIPE   &kp MINUS  &kp GREATER_THAN  &kp BACKSLASH          &kp GRAVE  &kp UNDERSCORE  &kp SLASH  &kp TILDE     &kp SEMICOLON  &trans
         &trans         &trans     &trans     &trans            &trans         &trans             &trans                     &trans
            >;
        };

        ADJ {
            bindings = <
&trans  &trans  &trans    &trans    &trans  &trans    &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans    &trans    &trans  &trans            &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans    &trans    &trans  &trans            &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &mo 5     &mo 4     &trans  &trans            &trans  &trans    &mo 4     &mo 5     &trans  &trans
        &trans  &mkp MB3  &mkp MB2  &trans  &mkp MB1  &trans          &trans              &trans
            >;
        };

        SNIP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans              &trans
            >;
        };

        SYS {
            bindings = <
&trans  &trans       &trans      &trans      &trans      &trans        &trans                &trans      &trans      &trans      &trans       &trans
&trans  &sys_reset   &bt BT_PRV  &bt BT_NXT  &bt BT_CLR  &out OUT_TOG          &bt BT_SEL 0  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &sys_reset   &trans
&trans  &bootloader  &trans      &trans      &trans      &trans                &bt BT_SEL 1  &trans      &trans      &trans      &bootloader  &trans
&trans  &trans       &trans      &trans      &trans      &trans                &bt BT_SEL 3  &trans      &trans      &trans      &trans       &trans
        &trans       &trans      &trans      &trans      &trans        &trans                &trans                  &trans
            >;
        };

        SNSC {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        SnipeScroll {
            if-layers = <4 5>;
            then-layer = <7>;
        };
    };
};
