#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
      /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";   
        device = <&trackball>;
        layers = <8>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&trackball>;
        layers = <9>;
        evt-type = <INPUT_EV_REL>;            
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };


    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&mt GRAVE ESCAPE  &kp N1       &kp N2            &kp N3      &kp N4        &kp N5        &kp N6                    &kp N7        &kp N8      &kp N9           &kp N0          &kp MINUS
&kp TAB           &kp Q        &kp W             &kp E       &kp R         &kp T                            &kp Y  &kp U         &kp I       &kp O            &kp P           &kp EQUAL
&caps_word        &mt LCTRL A  &mt LALT S        &mt LGUI D  &mt LSHIFT F  &kp G                            &kp H  &mt RSHIFT J  &mt RGUI K  &mt RALT L       &mt RCTRL SEMI  &kp APOS
&kp BACKSPACE     &lt 3 Z      &kp X             &kp C       &kp V         &kp B                            &kp N  &kp M         &kp COMMA   &kp DOT          &lt 3 SLASH     &kp DELETE
                  &lt 1 TAB    &kp LEFT_CONTROL  &kp LGUI    &kp SPACE     &kp LEFT_ALT  &kp RIGHT_CONTROL         &kp ENTER                 &lt 2 BACKSPACE
            >;
        };

        NAV {
            bindings = <
&kp F12          &kp F1          &kp F2           &kp F3    &kp F4     &kp F5    &kp F6                &kp F7  &kp F8  &kp F9  &kp F10          &kp F11
&trans           &kp SCROLLLOCK  &kp PAUSE_BREAK  &kp UP    &kp EQUAL  &kp LBRC              &kp RBRC  &kp N7  &kp N8  &kp N9  &kp KP_PLUS      &trans
&kp PRINTSCREEN  &kp INSERT      &kp LEFT         &kp DOWN  &kp RIGHT  &kp LBKT              &kp RBKT  &kp N4  &kp N5  &kp N6  &kp KP_MINUS     &kp KP_DIVIDE
&trans           &kp DEL         &kp PG_UP        &kp CAPS  &kp PG_DN  &kp LPAR              &kp RPAR  &kp N1  &kp N2  &kp N3  &kp KP_MULTIPLY  &trans
                 &trans          &trans           &trans    &trans     &trans    &kp KP_DOT            &kp N0          &mo 3
            >;
        };

        SYM {
            bindings = <
&kp F12  &kp F1         &kp F2     &kp F3     &kp F4            &kp F5         &kp F6             &kp F7          &kp F8     &kp F9        &kp F10        &kp F11
&trans   &kp EXCL       &kp AT     &kp HASH   &kp DLLR          &kp PRCNT              &kp CARET  &kp AMPS        &kp STAR   &kp QUESTION  &kp SQT        &trans
&trans   &kp PLUS       &kp EQUAL  &kp LPAR   &kp RPAR          &kp DQT                &kp COLON  &kp LBKT        &kp RBKT   &kp LBRC      &kp RBRC       &trans
&trans   &kp LESS_THAN  &kp PIPE   &kp MINUS  &kp GREATER_THAN  &kp BACKSLASH          &kp GRAVE  &kp UNDERSCORE  &kp SLASH  &kp TILDE     &kp SEMICOLON  &trans
         &mo 3          &trans     &trans     &trans            &trans         &trans             &trans                     &trans
            >;
        };

        ADJ {
            bindings = <
&kp F12  &kp F1       &kp F2          &kp F3            &kp F4             &kp F5           &kp F6                &kp F7      &kp F8      &kp F9      &kp F10      &kp F11
&trans   &sys_reset   &bt BT_PRV      &bt BT_NXT        &bt BT_CLR         &out OUT_TOG             &bt BT_SEL 0  &bt BT_CLR  &bt BT_PRV  &bt BT_NXT  &sys_reset   &trans
&trans   &bootloader  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT         &kp C_MUTE               &bt BT_SEL 1  &mkp MB1    &mkp MB2    &mkp MB3    &bootloader  &trans
&trans   &trans       &mo 5           &mo 4             &kp C_VOLUME_DOWN  &kp C_VOLUME_UP          &bt BT_SEL 2  &trans      &mo 4       &mo 5       &trans       &trans
         &trans       &trans          &trans            &trans             &trans           &trans                &trans                  &trans
            >;
        };

        SNIP {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &mo 5   &trans  &trans  &trans          &trans  &trans    &trans    &mo 5     &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mkp MB1  &mkp MB2  &mkp MB3  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans    &trans    &trans    &trans  &trans
        &trans  &trans  &trans  &trans  &trans  &trans          &trans              &trans
            >;
        };
    };
};
